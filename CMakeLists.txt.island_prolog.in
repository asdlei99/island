set(PLUGINS_DYNAMIC ON CACHE BOOL "Use dynamic linking for all plugins")

set ( STATIC_LIBS )

set ( PLUGIN_LIBS_DEPENDENCIES "")
set ( PLUGIN_LINK_DIRS "")

# specify output directory
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/modules)
set(CMAKE_MODULE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/modules)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/modules)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

function (build_imgui)
    # n.b. configure_file will replace any cmake variables it finds in the file with their values.
    configure_file("${ISLAND_BASE_DIR}CMakeLists.txt.imgui.in" ${ISLAND_BASE_DIR}/3rdparty/src/imgui/CMakeLists.txt @ONLY)

    execute_process(
        COMMAND mkdir -p 3rdparty/src/imgui/build
        WORKING_DIRECTORY "${ISLAND_BASE_DIR}"
        )

    execute_process(
        COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" -DCMAKE_INSTALL_PREFIX=${ISLAND_BASE_DIR}/3rdparty ..
        WORKING_DIRECTORY "${ISLAND_BASE_DIR}/3rdparty/src/imgui/build"
        )

    execute_process(
            COMMAND "${CMAKE_COMMAND}" --build . --target install
            WORKING_DIRECTORY "${ISLAND_BASE_DIR}/3rdparty/src/imgui/build"
            )

    link_directories(${ISLAND_BASE_DIR}/3rdparty/libs/imgui)
endfunction(build_imgui)

if (REQUIRES_ISLAND_CORE)

    build_imgui()

    # link glm source directory into includes directory
    execute_process(COMMAND ln -sfn ${ISLAND_BASE_DIR}/3rdparty/src/glm/glm ${ISLAND_BASE_DIR}/3rdparty/include/glm )
    # add glm include directory to includes search path - this is because glm's internals require glm's include directory to be globally accessible :(
    include_directories(${ISLAND_BASE_DIR}/3rdparty/include/glm)

    # add gltf include directory to search path
    execute_process(COMMAND ln -sfn ${ISLAND_BASE_DIR}/3rdparty/src/fx-gltf/include/fx ${ISLAND_BASE_DIR}/3rdparty/include/fx )

    # include 3rdparty includes directory
    include_directories(${ISLAND_BASE_DIR}/3rdparty/include)

    # create a link to json header-only library
    # execute_process(COMMAND ln -sfn ${ISLAND_BASE_DIR}/3rdparty/src/json/single_include/nlohmann ${ISLAND_BASE_DIR}/3rdparty/include/nlohmann )

    # create a link to shared resources
    execute_process(COMMAND ln -sfn ${ISLAND_BASE_DIR}/resources ${CMAKE_BINARY_DIR}/resources )

    # create a link to 3rd party library binaries so that app can find them.
    execute_process(COMMAND ln -sfn ${ISLAND_BASE_DIR}/3rdparty/libs ${CMAKE_BINARY_DIR}/libs )

    #  DEPRECATED: Uncomment this if you wish not to use the ubuntu package `lunarg-vulkan-sdk`.
    ## Check if a local copy of the Vulkan SDK exists, and the environment VULKAN_SDK points to it.
    ## If yes, use this directory for header includes, and linking
    #  set (VULKAN_SDK_ENV $ENV{VULKAN_SDK})
    #  if (EXISTS ${VULKAN_SDK_ENV})
    #
    #      #include vulkan from SDK installation directory
    #      include_directories(${VULKAN_SDK_ENV}/include/)
    #
    #      # NOTE: We're linking Vulkan from this system's Vulkan SDK directory
    #      link_directories(${VULKAN_SDK_ENV}/lib)
    #
    #  endif(EXISTS ${VULKAN_SDK_ENV})

endif()

include_directories ("${ISLAND_BASE_DIR}")
include_directories ("${ISLAND_BASE_DIR}/modules")

# These modules are always loaded - they control the plugin system.
set ( ISLAND_LOADER_MODULES pal_file_watcher;pal_api_loader )

# These modules form the renderer - if you want to draw graphics, you want these.
# Note that order matters: dependent modules must be named before their dependencies.
set ( CORE_ISLAND_MODULES le_pipeline_builder;pal_window;le_backend_vk;le_swapchain_vk;le_renderer;le_shader_compiler)

# We will store all requested module names in this list, and then load modules based on this list
set ( MODULES_LIST )

# Add required modules to modules list based on user flags
#
if (REQUIRES_ISLAND_LOADER)
    list (APPEND MODULES_LIST ${ISLAND_LOADER_MODULES})
endif()
 
if (REQUIRES_ISLAND_CORE)
   list (APPEND MODULES_LIST ${CORE_ISLAND_MODULES})
endif()

# Loads a requested module
macro(load_island_module MODULE_NAME)
    add_subdirectory ("${ISLAND_BASE_DIR}/modules/${MODULE_NAME}" ${MODULE_NAME})
endmacro()

# Call this macro from other modules to establish a dependency.
# Adds a module name to list of requested modules, 
# checks whether a module was already requested to prevent duplicates.
macro(add_island_module MODULE_NAME)
    if (NOT ${MODULE_NAME} IN_LIST MODULES_LIST)
        message(STATUS "Requesting extra module: ${MODULE_NAME}")
        # prepend module name to modules_list in global scope
        set( MODULES_LIST ${MODULE_NAME} ${MODULES_LIST} )
    else()
        # message(STATUS "[ NOTE ] Rejecting extra module request: `${MODULE_NAME}` - Module already present."  )
    endif()
endmacro(add_island_module)
