message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")

# Hot-reloading is enabled by default for debug target, 
# whilst release target are built as statically linked 
# binaries by default. 
# This can be changed on a project-by-project basis, as
# we only set initial default settings here.

if( CMAKE_BUILD_TYPE STREQUAL "Debug" )
    # we enable hot-reloading by default for debug target
    set(PLUGINS_DYNAMIC ON CACHE BOOL "Use dynamic linking for all plugins")
else()
    # we disdable hot-reloading by default for release target
    set(PLUGINS_DYNAMIC OFF CACHE BOOL "Use dynamic linking for all plugins")
endif()

set ( STATIC_LIBS )

set ( PLUGIN_LIBS_DEPENDENCIES "")
set ( PLUGIN_LINK_DIRS "")

# specify output directory
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/modules)
set(CMAKE_MODULE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/modules)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/modules)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

# get git commit version for island framework
execute_process(COMMAND
  git describe --match=NeVeRmAtCh --always --abbrev=40 --dirty
  WORKING_DIRECTORY "${ISLAND_BASE_DIR}"
  OUTPUT_VARIABLE ISLAND_GIT_SHA1
  ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)


function (link_resources param_target param_link_name)
    # create a link to local resources
    if (WIN32)
        if (EXISTS "${param_link_name}")
            message(STATUS "local resources exists ${param_link_name}")
        else()    
            get_filename_component(real_path "${param_link_name}" REALPATH)
            string(REPLACE "/" "\\" target_path "${real_path}")

            get_filename_component(real_path "${param_target}" REALPATH)
            string(REPLACE "/" "\\" src_path "${real_path}")

            execute_process(COMMAND cmd /C mklink /J "${target_path}" "${src_path}" 
                RESULT_VARIABLE link_result 
                OUTPUT_VARIABLE link_output)
            message(STATUS "created symbolic link ${target_path} ${src_path} ${link_output} ${link_result}")
        endif()    
        
    else()
        if (EXISTS "${param_link_name}")
            message(STATUS "local resources exists ${param_link_name}")
        else()
            execute_process(COMMAND ln -sfn ${param_target} ${param_link_name} )
            message(STATUS "created symbolic link ${param_target} ${param_link_name}")
        endif()
    endif()

endfunction(link_resources)

if (REQUIRES_ISLAND_CORE)

    # add glm include directory to includes search path 
    include_directories(${ISLAND_BASE_DIR}/3rdparty/src/glm/)

    # create a link to shared resources
    link_resources(${ISLAND_BASE_DIR}/resources ${CMAKE_BINARY_DIR}/resources )
    
    #  DEPRECATED: Uncomment this if you wish not to use the ubuntu package `lunarg-vulkan-sdk`.
    ## Check if a local copy of the Vulkan SDK exists, and the environment VULKAN_SDK points to it.
    ## If yes, use this directory for header includes, and linking
    ## we need this on windows

    if (WIN32)
        set (VULKAN_SDK_ENV $ENV{VULKAN_SDK})
        if (EXISTS ${VULKAN_SDK_ENV})
    
        #include vulkan from SDK installation directory
        include_directories(${VULKAN_SDK_ENV}/include/)
    
        # NOTE: We're linking Vulkan from this system's Vulkan SDK directory
        link_directories(${VULKAN_SDK_ENV}/lib)
    
        endif(EXISTS ${VULKAN_SDK_ENV})
    endif()
endif()

include_directories ("${ISLAND_BASE_DIR}")
include_directories ("${ISLAND_BASE_DIR}/modules")

# These modules are always loaded - they control the plugin system.
set ( ISLAND_LOADER_MODULES le_file_watcher;le_core )

# These modules form the renderer - if you want to draw graphics, you want these.
# Note that order matters: dependent modules must be named before their dependencies.
set ( CORE_ISLAND_MODULES le_pipeline_builder;le_window;le_backend_vk;le_swapchain_vk;le_renderer;le_jobs;le_shader_compiler)

# We will store all requested module names in this list, and then load modules based on this list
set ( MODULES_LIST )

# We will store all loaded module names in this global list, so that we can make sure that modules don't get loaded more than once.
set ( LOADED_MODULES_LIST CACHE INTERNAL "loaded_modules_list" )


# Add required modules to modules list based on user flags
#
if (REQUIRES_ISLAND_LOADER)
    list (APPEND MODULES_LIST ${ISLAND_LOADER_MODULES})
endif()
 
if (REQUIRES_ISLAND_CORE)
   list (APPEND MODULES_LIST ${CORE_ISLAND_MODULES})
endif()

# Loads a requested module
macro(load_island_module MODULE_NAME)
    message(STATUS "Loading module  : ${MODULE_NAME}")
    add_subdirectory ("${ISLAND_BASE_DIR}/modules/${MODULE_NAME}" ${MODULE_NAME})
endmacro()

# Call this macro from other modules to establish a dependency.
# Adds a module name to list of requested modules, 
# checks whether a module was already requested to prevent duplicates.
macro(add_island_module MODULE_NAME)
    
    if (NOT ${MODULE_NAME} IN_LIST LOADED_MODULES_LIST)
        # prepend module name to loaded_modules_list in global scope
        set( LOADED_MODULES_LIST ${LOADED_MODULES_LIST} ${MODULE_NAME} CACHE INTERNAL "loaded_modules_list" )        
        load_island_module(${MODULE_NAME})        
    else()
        message(STATUS "[ NOTE ] Rejecting extra module request: `${MODULE_NAME}` - Module already present."  )
    endif()

endmacro(add_island_module)

macro(add_static_lib LIB_NAME)

    if (NOT ${LIB_NAME} IN_LIST STATIC_LIBS)
        set (STATIC_LIBS ${STATIC_LIBS} ${LIB_NAME} PARENT_SCOPE)
    else()
        set (STATIC_LIBS ${STATIC_LIBS} PARENT_SCOPE)
        # message(STATUS "[ NOTE ] Rejecting extra static lib addition: `${LIB_NAME}` - lib already present."  )
    endif()

endmacro(add_static_lib LIB_NAME)

macro (depends_on_island_module MODULE_NAME)
    set (STORED_STATIC_LIBS ${STATIC_LIBS} )
    set (STATIC_LIBS ${STATIC_LIBS} ${TARGET})

    add_island_module(${MODULE_NAME})
    
    # message(STATUS "*** Current static libs: ${STATIC_LIBS}")
    set (STATIC_LIBS ${STATIC_LIBS})

endmacro(depends_on_island_module)

macro(add_dynamic_linker_flags)
    
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        
        # IMPORTANT: --no-gnu-unique for gcc compiler
        #
        # This compiler flag is neccesary as otherwise the library may get compiled
        # with some symbols exported as UNIQUE, which implicitly makes this library
        # un-closeable. This means, any calls to `dlclose` on this library, once
        # loaded, will have no effect, and autoreload for this library will not work
        # as the first version of the library will remain resident.
        
        target_compile_options (${TARGET} PUBLIC --no-gnu-unique)
        
    endif()
    
endmacro(add_dynamic_linker_flags)
